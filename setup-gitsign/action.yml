name: "Setup gitsign"
description: "Install and configure gitsign"
branding:
  icon: edit-3
  color: green
runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
        #!/bin/bash
        shopt -s expand_aliases
        if [ -z "$NO_COLOR" ]; then
          alias log_info="echo -e \"\033[1;32mINFO\033[0m:\""
          alias log_error="echo -e \"\033[1;31mERROR\033[0m:\""
        else
          alias log_info="echo \"INFO:\""
          alias log_error="echo \"ERROR:\""
        fi
        set -e

        mkdir -p $HOME/.gitsign

        shaprog() {
          case ${{ runner.os }} in
            Linux)
              sha256sum $1 | cut -d' ' -f1
              ;;
            macOS)
              shasum -a256 $1 | cut -d' ' -f1
              ;;
            Windows)
              powershell -command "(Get-FileHash $1 -Algorithm SHA256 | Select-Object -ExpandProperty Hash).ToLower()"
              ;;
            *)
              log_error "unsupported OS ${{ runner.os }}"
              exit 1
              ;;
          esac
        }

        gitsign_version='0.3.0'
        gitsign_linux_amd64_sha='2445c1b443b95a3652ab9af074f8d13fc9a45a3c98ed0c7ef4f299f2f2ca5c8a'
        gitsign_linux_arm64_sha='a21f8d6b7624975c0d9cfe278b01907c1daa3b62168f147fab544738ae9c9cf7'
        gitsign_darwin_amd64_sha='db13a32e2c4915cd11a2a01c5b93daaaee6db1b64c66d310430ed3e2d167701e'
        gitsign_darwin_arm64_sha='24c02598bbf75833f17a6bde28aca97b27a19d779ea55c3dbd72a750195431be'
        gitsign_windows_amd64_sha='4497a038168113195b7a9bc1b4957aef029cbfb33b739f1ee21cf22b826284e4'
        gitsign_windows_arm64_sha='6a50d1721a6fb4558823422d676e48922806842a25850d8bf251fa003243a926'
        gitsign_executable_name=gitsign

        trap "popd >/dev/null" EXIT

        pushd $HOME/.gitsign > /dev/null

        case ${{ runner.os }} in
          Linux)
            case ${{ runner.arch }} in
              X64)
                gitsign_filename=gitsign_${gitsign_version}_linux_amd64
                gitsign_sha=${gitsign_linux_amd64_sha}
                ;;

              ARM64)
                gitsign_filename=gitsign_${gitsign_version}_linux_arm64
                gitsign_sha=${gitsign_linux_arm64_sha}
                ;;

              *)
                log_error "unsupported architecture $arch"
                exit 1
                ;;
            esac
            ;;

          macOS)
            case ${{ runner.arch }} in
              X64)
                gitsign_filename=gitsign_${gitsign_version}_darwin_amd64
                gitsign_sha=${gitsign_darwin_amd64_sha}
                ;;

              ARM64)
                gitsign_filename=gitsign_${gitsign_version}_darwin_amd64
                gitsign_sha=${gitsign_darwin_arm64_sha}
                ;;

              *)
                log_error "unsupported architecture $arch"
                exit 1
                ;;
            esac
            ;;

          Windows)
            case ${{ runner.arch }} in
              X64)
                gitsign_filename=gitsign_${gitsign_version}_windows_amd64.exe
                gitsign_sha=${gitsign_windows_amd64_sha}
                gitsign_executable_name=gitsign.exe
                ;;

                ARM64)
                gitsign_filename=gitsign_${gitsign_version}_windows_arm64.exe
                gitsign_sha=${gitsign_darwin_arm64_sha}
                gitsign_executable_name=gitsign.exe
                ;;

              *)
                log_error "unsupported architecture $arch"
                exit 1
                ;;
            esac
            ;;
          *)
            log_error "unsupported architecture $arch"
            exit 1
            ;;
        esac

        expected_gitsign_version_digest=${gitsign_sha}
        log_info "Downloading gitsign version 'v${gitsign_version}' from https://github.com/sigstore/gitsign/releases/download/v${gitsign_version}/${gitsign_filename}"
        curl -sL https://github.com/sigstore/gitsign/releases/download/v${gitsign_version}/${gitsign_filename} -o ${gitsign_executable_name}
        shaDownloaded=$(shaprog ${gitsign_executable_name});
        if [[ ${shaDownloaded} != ${expected_gitsign_version_digest} ]]; then
          log_error "Unable to validate gitsign version: 'v${gitsign_version}': want ${expected_gitsign_version_digest}, got ${shaDownloaded}"
          exit 1
        fi
        chmod +x ${gitsign_executable_name}

        # Configure
        git config --global commit.gpgsign true       # Sign all commits
        git config --global gpg.x509.program gitsign  # Use gitsign for signing
        git config --global gpg.format x509           # gitsign expects x509 args

        # Use workflow name as the username
        git config --global user.name "${{ github.workflow }}"
        # This email identifies the commit as GitHub Actions - see https://github.com/orgs/community/discussions/26560
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com>"

    - if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      run:  echo "$HOME/.gitsign" >> $GITHUB_PATH
      shell: bash
    - if: ${{ runner.os == 'Windows' }}
      run:  echo "$HOME/.gitsign" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh
