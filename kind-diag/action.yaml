# Copyright 2022 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0

name: 'Collect KinD diagnostics'
description: |
  This action describes a handful of core resources, such as
  nodes and pods.  It then uploads the logs from the KinD
  cluster to the action run.

inputs:
  cluster-resources:
    description: |
      A comma delimited list of cluster-scoped resources
      to describe and dump.
    required: true
    default: nodes,namespaces,crds

  namespace-resources:
    description: |
      A comma delimited list of namespace-scoped resources
      to describe and dump.
    required: true
    default: pods

  artifact-name:
    description: |
      The name of the artifact to upload.
    required: true
    default: logs

  start-time:
    description: |
      The start time to query the Grafana Dashboard, in timestamp (default: now).
    required: false
    default: "now"

  grafana-dashboards:
    description: |
      List of Grafana dashboards to be collected with namespace/dashboard name.
    required: false
    default: ""

  grafana-namespace:
    description: |
      Name of the Grafana namespace to be used for port forward.
    required: false
    default: "monitoring-system"

  grafana-svc:
    description: |
      Name of the Grafana service to be used for port forward.
    required: false
    default: "svc/prometheus-grafana"

  grafana-username:
    description: |
      Name of the Grafana service to be used for port forward.
    required: false
    default: "admin"

  grafana-password:
    description: |
      Name of the Grafana service to be used for port forward.
    required: false
    default: "prom-operator"

runs:
  using: "composite"
  steps:
    - name: Collect cluster diagnostics
      shell: bash
      run: |
        for resource in $(echo "${{ inputs.cluster-resources }}" | sed 's/,/ /g'); do
          for x in $(kubectl get $resource -oname || true); do
            echo "::group:: describe $resource $x"
            kubectl describe $x || true
            echo '::endgroup::'
          done
        done

    - name: Collect namespace diagnostics
      shell: bash
      run: |
        for ns in $(kubectl get ns -oname | cut -d'/' -f 2); do
          for resource in $(echo "${{ inputs.namespace-resources }}" | sed 's/,/ /g'); do
            echo --- $ns $resource ---
            kubectl get $resource -n${ns}
            for x in $(kubectl get $resource -n${ns} -oname || true); do
              echo "::group:: describe $resource $x"
              # Don't fail if the resource disappears midway.
              kubectl describe -n${ns} $x || true
              echo '::endgroup::'
            done
          done
        done

    - name: Collect logs
      shell: bash
      run: |
        mkdir -p /tmp/${{ inputs.artifact-name }}
        kind export logs /tmp/${{ inputs.artifact-name }}

    - name: Collect grafana dashboards
      shell: bash
      if: ${{ inputs.grafana-dashboards != '' }}
      run: |
        kubectl port-forward -n ${{ inputs.grafana-namespace }} ${{ inputs.grafana-svc }} 3000:80 &
        sleep 5
        status=0
        curl --max-time 5 --retry-max-time 20 --retry 20 --retry-connrefused http://localhost:3000 || status=1
        if [ $status -ne 0 ]; then
          echo "failed to connect to grafana, will not collect any logs"
          exit 0
        fi

        mkdir -p /tmp/graphs
        IFS=',' read -r -a grafs <<< ${{ inputs.grafana-dashboards }}
        for graf in "${grafs[@]}"
        do
          curl "http://${{ inputs.grafana-username }}:${{ inputs.grafana-password }}@localhost:3000/render/d/"$graf"?width=2000&height=2000&from=${{ inputs.start-time }}&to=now" > /tmp/graphs/"${graf#*/}".png
        done

    - name: Package logs
      shell: bash
      run: |
        tar -cvf /tmp/temp.tar -C /tmp ${{ inputs.artifact-name }}
        if [ -d "/tmp/graphs" ]; then
          tar -rvkf /tmp/temp.tar -C /tmp graphs
        fi
        tar -zvcf /tmp/${{ inputs.artifact-name }}.tar.gz -C /tmp temp.tar

    - name: Upload artifacts
      uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v3
      with:
        name: ${{ inputs.artifact-name }}.tar.gz
        path: /tmp/${{ inputs.artifact-name }}.tar.gz
