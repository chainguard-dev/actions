# Copyright 2022 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0

name: 'boilerplate'
description: |
  This action runs a tool over the files in the working tree
  to check for boilerplate license headers.

inputs:
  extension:
    description: |
      The file extension (no '.') for files to match.
    required: true
    default: go

  language:
    description: |
      The human-readable language name (matching extension)
    required: true
    default: Go

  boilerplate-directory:
    description: |
      The directory in which to look for `boilerplate.{extension}.txt` files.
    required: true
    default: ./hack/boilerplate

  exclude:
    description: |
      Regular expression of paths to exclude.
    required: false
    default: ((vendor|third_party)/|.pb(.gw)?.go|.generated.go)

runs:
  using: "composite"
  steps:
  # Go is an implementation detail of this action (go get below)
  # TODO(mattmoor): Cut a release of `boilerplate-check` we can use instead.
  - name: Set up Go
    uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
    with:
      go-version: '1.22'
      check-latest: true
      cache: false

  - uses: reviewdog/action-setup@3f401fe1d58fe77e10d665ab713057375e39b887 # v1.3.0
    with:
      reviewdog_version: latest

  - name: Install Tools
    shell: bash
    run: |
      cd "$(mktemp -d)"

      echo '::group:: Installing boilerplate-check ... https://github.com/mattmoor/boilerplate-check'
      go install github.com/mattmoor/boilerplate-check/cmd/boilerplate-check@latest
      echo '::endgroup::'

  - name: check boilerplate
    shell: bash
    env:
      REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
    run: |
      set -e
      cd "${GITHUB_WORKSPACE}" || exit 1

      echo '::group:: Running github.com/mattmoor/boilerplate-check for ${{ inputs.language }} with reviewdog üê∂ ...'
      # Don't fail because of boilerplate-check
      set +o pipefail
      boilerplate-check check \
        --boilerplate ${{ inputs.boilerplate-directory }}/boilerplate.${{ inputs.extension }}.txt \
        --file-extension ${{ inputs.extension }} \
        --exclude "${{ inputs.exclude }}" |
      reviewdog -efm="%A%f:%l: %m" \
            -efm="%C%.%#" \
            -name="${{ inputs.language }} headers" \
            -reporter="github-pr-check" \
            -filter-mode="diff_context" \
            -fail-on-error="true" \
            -level="error"
      echo '::endgroup::'
