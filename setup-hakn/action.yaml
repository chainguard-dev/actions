# Copyright 2022 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0

name: 'Setup chainguard-dev/hakn'
description: |
  This action sets up chainguard-dev/hakn Knative on the current
  kubectl context (typically KinD from setup-kind).

inputs:
  version:
    description: |
      The version of Hakn to install, e.g. 1.8.0
    required: false
    default: 1.8.5

  istio-version:
    description: |
      The version of Istio to install, e.g. 1.14.5
    required: false
    default: 1.14.5

  enable-auto-injection:
    description: |
      Whether to enable sidecar injection by default
    required: false
    default: false

  cluster-domain:
    description: |
      The cluster domain suffix, defaults to cluster.local
    required: false
    default: "cluster.local"

  serving-features:
    description: |
      The serialized JSON for the Knative Serving features configmap
      containing the features to be enabled, e.g.
        {"kubernetes.podspec-fieldref":"enabled"}
    required: false
    default: '{}'

  serving-defaults:
    description: |
      The serialized JSON for the Knative Serving defaults configmap
      containing the desired default values, e.g.
        {"revision-timeout-seconds":"120"}
    required: false
    default: '{}'

  serving-autoscaler:
    description: |
      The serialized JSON for the Knative Serving autoscaling configmap
      containing the desired settings, e.g.
        {"min-scale":"1"}
    required: false
    default: '{}'

outputs:
  load-balancer-ip:
    description: |
      The IP of the type LoadBalancer service on which knative serves.
    value: ${{ steps.knative.outputs.load-balancer-ip }}

runs:
  using: "composite"

  steps:
    - name: Install Knative
      id: knative
      shell: bash
      run: |
        function download_istioctl() {
          ISTIO_VERSION=${{ inputs.istio-version }}
          ISTIO_BASE_URL="https://github.com/istio/istio/releases/download"
          case "$(echo $RUNNER_ARCH | awk '{print tolower($0)}')" in
          x86|x64) ARCH=amd64;;
          arm64)   ARCH=arm64;;
          *)
            echo Unsupported RUNNER_ARCH \"$RUNNER_ARCH\"
            exit -1
            ;;
          esac
          case "$(echo $RUNNER_OS | awk '{print tolower($0)}')" in
          "linux") OS=linux;;
          "macos") OS=osx;;
          *)
            echo Unsupported RUNNER_OS \"$RUNNER_OS\"
            exit -1
            ;;
          esac
          ISTIO_URL=${ISTIO_BASE_URL}/${ISTIO_VERSION}/istio-${ISTIO_VERSION}-${OS}-${ARCH}.tar.gz
          wget $ISTIO_URL -O istio.tar.gz
          tar xzf istio.tar.gz
        }


        download_istioctl

        # Find out the K8s API server IP address and exclude it from Istio.
        API_SERVER_IP=$(kubectl get svc kubernetes -o jsonpath='{.spec.clusterIP}')

        cat > istio-profile.yaml <<EOF
        apiVersion: install.istio.io/v1alpha1
        kind: IstioOperator
        spec:
          # Test with the distroless images.
          tag: ${{ inputs.istio-version }}-distroless
          values:
            global:
              # Ideally for KinD installations we want to blow away the resources
              # sections. However, doing that here will result in Istio's default which
              # is high. Choosing some nomimal small numbers here:
              defaultResources: &defaultResources
                requests:
                  cpu: 1m
                  memory: 10Mi
              proxy:
                clusterDomain: ${{ inputs.cluster-domain }}
                resources: *defaultResources
                excludeIPRanges: "${API_SERVER_IP}/32"
            sidecarInjectorWebhook:
              enableNamespacesByDefault: ${{ inputs.enable-auto-injection }}

          meshConfig:
            outboundTrafficPolicy:
              mode: ALLOW_ANY
            defaultConfig:
              terminationDrainDuration: "20s"

          components:
            ingressGateways:
              - name: istio-ingressgateway
                k8s: &defaultK8s
                  hpaSpec:
                    maxReplicas: 1
                    minReplicas: 1
                  resources: *defaultResources
            pilot:
              k8s: *defaultK8s
        EOF

        # We need opt-out sidecar injector for the namespaces existing before we install Istio.
        for x in $(kubectl get namespaces -oname); do
          kubectl label $x istio-injection=disabled --overwrite
        done

        ./istio-${ISTIO_VERSION}/bin/istioctl install --skip-confirmation -f istio-profile.yaml

        # Remove the webhook in cases injection isn't needed.
        if [[ "${{ inputs.enable-auto-injection }}" != "true" ]]; then
          # Delete the sidecar injector when we don't need auto-injection.
          kubectl delete mutatingwebhookconfigurations -l app=sidecar-injector
        fi

        # Eliminates the resources blocks in a release yaml
        function resource_blaster() {
          local FILE="${1}"
          local DOWNLOAD_URL="https://github.com/chainguard-dev/hakn/releases/download/v${{ inputs.version }}/${FILE}"

          curl -L -s $DOWNLOAD_URL \
            | yq e 'del(.spec.template.spec.containers[]?.resources)' - \
            `# Filter out empty objects that come out as {} b/c kubectl barfs` \
            | grep -v '^{}$'
        }
        resource_blaster serving.yaml | kubectl apply --validate=false -f -
        kubectl patch configmap/config-network \
          --namespace knative-serving \
          --type merge \
          --patch '{"data":{"ingress.class":"istio.ingress.networking.knative.dev","autocreateClusterDomainClaims":"true"}}'

        # Wait for Knative to be ready (or webhook will reject services)
        for x in $(kubectl get deploy --namespace knative-serving -oname); do
          kubectl rollout status --timeout 5m --namespace knative-serving $x
        done

        while ! kubectl patch configmap/config-features \
          --namespace knative-serving \
          --type merge \
          --patch '{"data":${{ inputs.serving-features }}}'
        do
            echo Waiting for webhook to be up.
            sleep 1
        done

        while ! kubectl patch configmap/config-defaults \
          --namespace knative-serving \
          --type merge \
          --patch '{"data":${{ inputs.serving-defaults }}}'
        do
            echo Waiting for webhook to be up.
            sleep 1
        done

        while ! kubectl patch configmap/config-autoscaler \
          --namespace knative-serving \
          --type merge \
          --patch '{"data":${{ inputs.serving-autoscaler }}}'
        do
            echo Waiting for webhook to be up.
            sleep 1
        done

        # Wait for hakn pods to be up and running
        kubectl wait -n knative-serving --timeout=5m --for=condition=ready pods --all

        export IP=$(kubectl get svc -n istio-system istio-ingressgateway -ojsonpath={.status.loadBalancer.ingress[0].ip})
        echo LB IP: ${IP}
        echo "load-balancer-ip=${IP}" >> $GITHUB_OUTPUT

        # Required for minio
        kubectl patch cm config-domain -n knative-serving \
          --type merge \
          -p "{\"data\":{\"$IP.sslip.io\":\"\"}}"
